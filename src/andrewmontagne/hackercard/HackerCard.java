package andrewmontagne.hackercard;

import javacard.framework.*;

public class HackerCard extends Applet
{
    private byte[] echoBytes = {
            0x54, 0x72, 0x65, 0x76, 0x6f, 0x72, 0x2c, 0x0a, 0x0a, 0x54,
            0x68, 0x61, 0x6e, 0x6b, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x66,
            0x6f, 0x72, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x6e, 0x64, 0x65,
            0x72, 0x66, 0x75, 0x6c, 0x20, 0x43, 0x68, 0x72, 0x69, 0x73,
            0x74, 0x6d, 0x61, 0x73, 0x2c, 0x20, 0x49, 0x27, 0x6d, 0x20,
            0x73, 0x6f, 0x72, 0x72, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
            0x65, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x64, 0x6e, 0x27, 0x74,
            0x20, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x20,
            0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65,
            0x73, 0x74, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x49, 0x20,
            0x77, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x68, 0x65, 0x72, 0x69,
            0x73, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d,
            0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6f,
            0x75, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x6f,
            0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x0a, 0x0a, 0x49,
            0x20, 0x6c, 0x6f, 0x76, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x2c,
            0x20, 0x54, 0x72, 0x65, 0x76, 0x6f, 0x72, 0x2e, 0x0a, 0x0a,
            0x2d, 0x41, 0x6e, 0x64, 0x72, 0x65, 0x77};
    private static final short LENGTH_ECHO_BYTES = 177;

    /**
     * Only this class's install method should create the applet object.
     */
    protected HackerCard()
    {
        register();
    }

    /**
     * Installs this applet.
     * @param bArray the array containing installation parameters
     * @param bOffset the starting offset in bArray
     * @param bLength the length in bytes of the parameter data in bArray
     */
    public static void install(byte[] bArray, short bOffset, byte bLength)
    {
        new HackerCard();
    }

    /**
     * Processes an incoming APDU.
     * @see APDU
     * @param apdu the incoming APDU
     * @exception ISOException with the response bytes per ISO 7816-4
     */
    public void process(APDU apdu)
    {
        byte buffer[] = apdu.getBuffer();

        if ((buffer[ISO7816.OFFSET_CLA] == 0) &&
                (buffer[ISO7816.OFFSET_INS] == (byte)(0xA4))) return;

        apdu.setOutgoing();
        apdu.setOutgoingLength( (short) (LENGTH_ECHO_BYTES + 5) );
        // echo data
        apdu.sendBytesLong( echoBytes, (short) 0, LENGTH_ECHO_BYTES );
    }

}
